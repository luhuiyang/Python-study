21:35:04 完整请求
21:35:04 请求结束
21:35:04 rrr POST /api/todo/update HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Content-Length: 28
Origin: http://localhost:3000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/todo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03

{"id":"5","title":"4444444"}
21:35:04 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:35:04 path and query /api/todo/update {} {"id":"5","title":"4444444"}
21:35:04 kwargs,  {'id': 5} <class 'dict'>
21:35:04 debug 1
21:35:04 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "completed": false,
  "id": 5,
  "ct": 1489151675,
  "title": "4444444",
  "ut": 1489930504
}
21:35:05 完整请求
21:35:05 请求结束
21:35:05 rrr POST /api/todo/update HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Content-Length: 28
Origin: http://localhost:3000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/todo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03

{"id":"5","title":"4444444"}
21:35:05 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:35:05 path and query /api/todo/update {} {"id":"5","title":"4444444"}
21:35:05 kwargs,  {'id': 5} <class 'dict'>
21:35:05 debug 1
21:35:05 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "completed": false,
  "id": 5,
  "ct": 1489151675,
  "title": "4444444",
  "ut": 1489930505
}
21:35:17 完整请求
21:35:17 请求结束
21:35:17 rrr GET /weibo/index HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:35:17 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:35:17 path and query /weibo/index {} 
21:35:17 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <button
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:35:17 完整请求
21:35:17 完整请求
21:35:17 请求结束
21:35:17 请求结束
21:35:17 rrr GET /static?file=weibo.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:35:17 rrr GET /static?file=gua.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:35:17 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:35:17 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:35:17 path and query /static {'file': 'weibo.js'} 
21:35:17 path and query /static {'file': 'gua.js'} 
21:35:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {

    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var w = `
        <div class='weibo-cell' data-id=${id}>
            <div class="weibo-content">
                [WEIBO]: ${content}
            <button class="Weibo-delete">删除</button>
            </div>
            <button class="Weibo-edit">更新</button>

            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return w
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var content = WeiboCell.querySelector('.weibo-content')
            content.style.display="none"
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            log('输入的值： ' + content)
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                log('更新内容', r)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.style.display="block"
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:35:17 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(weibo_id, callback) {
    var path = '/api/weibo/delete?id=' + weibo_id
    ajax('GET', path, '', callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log(form)
    ajax('POST', path, form, callback)
}

21:35:18 完整请求
21:35:18 请求结束
21:35:18 rrr GET /api/weibo/all HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:35:18 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:35:18 path and query /api/weibo/all {} 
21:35:18 kwargs,  {'weibo_id': 1} <class 'dict'>
21:35:18 kwargs,  {'weibo_id': 2} <class 'dict'>
21:35:18 kwargs,  {'weibo_id': 3} <class 'dict'>
21:35:18 kwargs,  {'weibo_id': 4} <class 'dict'>
21:35:18 kwargs,  {'weibo_id': 5} <class 'dict'>
21:35:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1,
        "weibo_id": 1
      },
      {
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "weibo_id": 1
      }
    ]
  },
  {
    "user_id": 1,
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "user_id": 1,
        "content": "hello",
        "id": 3,
        "weibo_id": 2
      },
      {
        "user_id": 1,
        "content": "123",
        "id": 4,
        "weibo_id": 2
      },
      {
        "user_id": 1,
        "content": "asdf",
        "id": 5,
        "weibo_id": 2
      },
      {
        "user_id": 2,
        "content": "说得好",
        "id": 7,
        "weibo_id": 2
      },
      {
        "user_id": 2,
        "content": "说得好",
        "id": 8,
        "weibo_id": 2
      }
    ]
  },
  {
    "user_id": 1,
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "user_id": 1,
        "content": "123",
        "id": 6,
        "weibo_id": 3
      }
    ]
  },
  {
    "content": "123456",
    "id": 4,
    "comments": []
  },
  {
    "content": "1234567",
    "id": 5,
    "comments": []
  }
]
21:35:25 完整请求
21:35:25 请求结束
21:35:25 rrr POST /api/weibo/update HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Content-Length: 29
Origin: http://localhost:3000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:35:25 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:35:25 path and query /api/weibo/update {} 
21:35:25 完整请求
21:35:25 请求结束
21:35:25 rrr POST /api/weibo/update HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Content-Length: 29
Origin: http://localhost:3000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:35:25 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:35:25 path and query /api/weibo/update {} 
21:37:28 完整请求
21:37:28 请求结束
21:37:28 rrr GET /weibo/index HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:37:28 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:37:28 path and query /weibo/index {} 
21:37:28 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <button
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:37:28 完整请求
21:37:28 请求结束
21:37:28 rrr GET /static?file=gua.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:37:28 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:37:28 path and query /static {'file': 'gua.js'} 
21:37:28 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(weibo_id, callback) {
    var path = '/api/weibo/delete?id=' + weibo_id
    ajax('GET', path, '', callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log(form)
    ajax('POST', path, form, callback)
}

21:37:28 完整请求
21:37:28 请求结束
21:37:28 rrr GET /static?file=weibo.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:37:28 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:37:28 path and query /static {'file': 'weibo.js'} 
21:37:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {

    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var w = `
        <div class='weibo-cell' data-id=${id}>
            <div class="weibo-content">
                [WEIBO]: ${content}
            <button class="Weibo-delete">删除</button>
            </div>
            <button class="Weibo-edit">更新</button>

            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return w
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var content = WeiboCell.querySelector('.weibo-content')
            content.style.display="none"
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            log('输入的值： ' + content)
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('输入的值form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                log('更新内容', r)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.style.display="block"
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:37:28 完整请求
21:37:28 请求结束
21:37:28 rrr GET /api/weibo/all HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:37:28 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:37:28 path and query /api/weibo/all {} 
21:37:28 kwargs,  {'weibo_id': 1} <class 'dict'>
21:37:28 kwargs,  {'weibo_id': 2} <class 'dict'>
21:37:28 kwargs,  {'weibo_id': 3} <class 'dict'>
21:37:28 kwargs,  {'weibo_id': 4} <class 'dict'>
21:37:28 kwargs,  {'weibo_id': 5} <class 'dict'>
21:37:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1,
        "weibo_id": 1
      },
      {
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "weibo_id": 1
      }
    ]
  },
  {
    "user_id": 1,
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "user_id": 1,
        "content": "hello",
        "id": 3,
        "weibo_id": 2
      },
      {
        "user_id": 1,
        "content": "123",
        "id": 4,
        "weibo_id": 2
      },
      {
        "user_id": 1,
        "content": "asdf",
        "id": 5,
        "weibo_id": 2
      },
      {
        "user_id": 2,
        "content": "说得好",
        "id": 7,
        "weibo_id": 2
      },
      {
        "user_id": 2,
        "content": "说得好",
        "id": 8,
        "weibo_id": 2
      }
    ]
  },
  {
    "user_id": 1,
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "user_id": 1,
        "content": "123",
        "id": 6,
        "weibo_id": 3
      }
    ]
  },
  {
    "content": "123456",
    "id": 4,
    "comments": []
  },
  {
    "content": "1234567",
    "id": 5,
    "comments": []
  }
]
21:37:35 完整请求
21:37:35 请求结束
21:37:35 rrr POST /api/weibo/update HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Content-Length: 32
Origin: http://localhost:3000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03

{"id":"5","content":"222222222"}
21:37:35 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:37:35 path and query /api/weibo/update {} {"id":"5","content":"222222222"}
21:38:15 完整请求
21:38:15 请求结束
21:38:15 rrr 
21:38:27 完整请求
21:38:27 请求结束
21:38:27 rrr GET /weibo/index HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:38:27 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:38:27 path and query /weibo/index {} 
21:38:27 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <button
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:38:27 完整请求
21:38:27 请求结束
21:38:27 rrr GET /static?file=gua.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:38:27 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:38:27 path and query /static {'file': 'gua.js'} 
21:38:27 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(weibo_id, callback) {
    var path = '/api/weibo/delete?id=' + weibo_id
    ajax('GET', path, '', callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log(form)
    ajax('POST', path, form, callback)
}

21:38:28 完整请求
21:38:28 请求结束
21:38:28 rrr GET /static?file=weibo.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:38:28 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:38:28 path and query /static {'file': 'weibo.js'} 
21:38:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {

    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var w = `
        <div class='weibo-cell' data-id=${id}>
            <div class="weibo-content">
                [WEIBO]: ${content}
            <button class="Weibo-delete">删除</button>
            </div>
            <button class="Weibo-edit">更新</button>

            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return w
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var content = WeiboCell.querySelector('.weibo-content')
            content.style.display="none"
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            log('输入的值： ' + content)
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('输入的值form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                log('更新内容', r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.style.display="block"
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:38:28 完整请求
21:38:28 请求结束
21:38:28 rrr GET /api/weibo/all HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:38:28 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:38:28 path and query /api/weibo/all {} 
21:38:28 kwargs,  {'weibo_id': 1} <class 'dict'>
21:38:28 kwargs,  {'weibo_id': 2} <class 'dict'>
21:38:28 kwargs,  {'weibo_id': 3} <class 'dict'>
21:38:28 kwargs,  {'weibo_id': 4} <class 'dict'>
21:38:28 kwargs,  {'weibo_id': 5} <class 'dict'>
21:38:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1,
        "weibo_id": 1
      },
      {
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "weibo_id": 1
      }
    ]
  },
  {
    "user_id": 1,
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "user_id": 1,
        "content": "hello",
        "id": 3,
        "weibo_id": 2
      },
      {
        "user_id": 1,
        "content": "123",
        "id": 4,
        "weibo_id": 2
      },
      {
        "user_id": 1,
        "content": "asdf",
        "id": 5,
        "weibo_id": 2
      },
      {
        "user_id": 2,
        "content": "说得好",
        "id": 7,
        "weibo_id": 2
      },
      {
        "user_id": 2,
        "content": "说得好",
        "id": 8,
        "weibo_id": 2
      }
    ]
  },
  {
    "user_id": 1,
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "user_id": 1,
        "content": "123",
        "id": 6,
        "weibo_id": 3
      }
    ]
  },
  {
    "content": "123456",
    "id": 4,
    "comments": []
  },
  {
    "content": "1234567",
    "id": 5,
    "comments": []
  }
]
21:38:34 完整请求
21:38:34 请求结束
21:38:34 rrr POST /api/weibo/update HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Content-Length: 32
Origin: http://localhost:3000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03

{"id":"5","content":"qweqwewqe"}
21:38:34 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:38:34 path and query /api/weibo/update {} {"id":"5","content":"qweqwewqe"}
21:39:15 完整请求
21:39:15 请求结束
21:39:15 rrr 
21:41:59 完整请求
21:41:59 请求结束
21:41:59 rrr GET /weibo/index HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:41:59 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:41:59 path and query /weibo/index {} 
21:41:59 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <button
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:41:59 完整请求
21:41:59 请求结束
21:41:59 rrr GET /static?file=gua.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:41:59 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:42:00 path and query /static {'file': 'gua.js'} 
21:42:00 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(weibo_id, callback) {
    var path = '/api/weibo/delete?id=' + weibo_id
    ajax('GET', path, '', callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log(form)
    ajax('POST', path, form, callback)
}

21:42:00 完整请求
21:42:00 请求结束
21:42:00 rrr GET /static?file=weibo.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:42:00 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:42:00 path and query /static {'file': 'weibo.js'} 
21:42:00 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {

    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var w = `
        <div class='weibo-cell' data-id=${id}>
            <div class="weibo-content">
                [WEIBO]: ${content}
            <button class="Weibo-delete">删除</button>
            </div>
            <button class="Weibo-edit">更新</button>

            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return w
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var content = WeiboCell.querySelector('.weibo-content')
            content.style.display="none"
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            log('输入的值： ' + content)
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('输入的值form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                log('更新内容', r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.style.display="block"
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:42:00 完整请求
21:42:00 请求结束
21:42:00 rrr GET /api/weibo/all HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:42:00 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:42:00 path and query /api/weibo/all {} 
21:42:00 kwargs,  {'weibo_id': 1} <class 'dict'>
21:42:00 kwargs,  {'weibo_id': 2} <class 'dict'>
21:42:00 kwargs,  {'weibo_id': 3} <class 'dict'>
21:42:00 kwargs,  {'weibo_id': 4} <class 'dict'>
21:42:00 kwargs,  {'weibo_id': 5} <class 'dict'>
21:42:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1,
        "weibo_id": 1
      },
      {
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "weibo_id": 1
      }
    ]
  },
  {
    "user_id": 1,
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "user_id": 1,
        "content": "hello",
        "id": 3,
        "weibo_id": 2
      },
      {
        "user_id": 1,
        "content": "123",
        "id": 4,
        "weibo_id": 2
      },
      {
        "user_id": 1,
        "content": "asdf",
        "id": 5,
        "weibo_id": 2
      },
      {
        "user_id": 2,
        "content": "说得好",
        "id": 7,
        "weibo_id": 2
      },
      {
        "user_id": 2,
        "content": "说得好",
        "id": 8,
        "weibo_id": 2
      }
    ]
  },
  {
    "user_id": 1,
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "user_id": 1,
        "content": "123",
        "id": 6,
        "weibo_id": 3
      }
    ]
  },
  {
    "content": "123456",
    "id": 4,
    "comments": []
  },
  {
    "content": "1234567",
    "id": 5,
    "comments": []
  }
]
21:42:07 完整请求
21:42:07 请求结束
21:42:07 rrr POST /api/weibo/update HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Content-Length: 32
Origin: http://localhost:3000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03

{"id":"5","content":"sdfdsfssd"}
21:42:07 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:42:07 path and query /api/weibo/update {} {"id":"5","content":"sdfdsfssd"}
21:43:15 完整请求
21:43:15 请求结束
21:43:15 rrr 
21:44:14 完整请求
21:44:14 请求结束
21:44:14 rrr GET /weibo/index HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:44:14 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:44:14 path and query /weibo/index {} 
21:44:14 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <button
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:44:14 完整请求
21:44:14 请求结束
21:44:14 rrr GET /static?file=gua.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:44:14 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:44:14 path and query /static {'file': 'gua.js'} 
21:44:14 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(weibo_id, callback) {
    var path = '/api/weibo/delete?id=' + weibo_id
    ajax('GET', path, '', callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log(form)
    ajax('POST', path, form, callback)
}

21:44:14 完整请求
21:44:14 请求结束
21:44:14 rrr GET /static?file=weibo.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:44:14 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:44:14 path and query /static {'file': 'weibo.js'} 
21:44:14 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {

    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var w = `
        <div class='weibo-cell' data-id=${id}>
            <div class="weibo-content">
                [WEIBO]: ${content}
            <button class="Weibo-delete">删除</button>
            </div>
            <button class="Weibo-edit">更新</button>

            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return w
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var content = WeiboCell.querySelector('.weibo-content')
            content.style.display="none"
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            log('输入的值： ' + content)
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('输入的值form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                log('更新内容', r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.style.display="block"
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:44:15 完整请求
21:44:15 请求结束
21:44:15 rrr GET /api/weibo/all HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:44:15 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:44:15 path and query /api/weibo/all {} 
21:44:15 kwargs,  {'weibo_id': 1} <class 'dict'>
21:44:15 kwargs,  {'weibo_id': 2} <class 'dict'>
21:44:15 kwargs,  {'weibo_id': 3} <class 'dict'>
21:44:15 kwargs,  {'weibo_id': 4} <class 'dict'>
21:44:15 kwargs,  {'weibo_id': 5} <class 'dict'>
21:44:15 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet",
    "id": 1
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "content": "123456",
    "id": 4,
    "comments": []
  },
  {
    "content": "1234567",
    "id": 5,
    "comments": []
  }
]
21:44:22 完整请求
21:44:22 请求结束
21:44:22 rrr POST /api/weibo/update HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Content-Length: 30
Origin: http://localhost:3000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03

{"id":"5","content":"-------"}
21:44:22 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:44:22 path and query /api/weibo/update {} {"id":"5","content":"-------"}
21:44:22 kwargs,  {'id': 5} <class 'dict'>
21:44:22 debug 4
21:44:22 kwargs,  {'weibo_id': 5} <class 'dict'>
21:44:22 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "-------",
  "id": 5,
  "comments": []
}
21:44:50 完整请求
21:44:50 请求结束
21:44:50 rrr 
21:48:43 完整请求
21:48:43 请求结束
21:48:43 rrr GET /weibo/index HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:48:43 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:48:43 path and query /weibo/index {} 
21:48:43 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <button
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:48:43 完整请求
21:48:43 请求结束
21:48:43 rrr GET /static?file=gua.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:48:43 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:48:43 path and query /static {'file': 'gua.js'} 
21:48:43 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(weibo_id, callback) {
    var path = '/api/weibo/delete?id=' + weibo_id
    ajax('GET', path, '', callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log(form)
    ajax('POST', path, form, callback)
}

21:48:43 完整请求
21:48:44 请求结束
21:48:44 rrr GET /static?file=weibo.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:48:44 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:48:44 path and query /static {'file': 'weibo.js'} 
21:48:44 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {

    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var w = `
        <div class='weibo-cell' data-id=${id}>
            <div class="weibo-content">
                [WEIBO]: ${content}
            <button class="Weibo-delete">删除</button>
            </div>
            <button class="Weibo-edit">更新</button>

            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return w
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var content = WeiboCell.querySelector('.weibo-content')
//            content.style.display="none"
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            log('输入的值： ' + content)
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('输入的值form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                log('更新内容', r)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.style.display="block"
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:48:44 完整请求
21:48:44 请求结束
21:48:44 rrr GET /api/weibo/all HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:48:44 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:48:44 path and query /api/weibo/all {} 
21:48:44 kwargs,  {'weibo_id': 1} <class 'dict'>
21:48:44 kwargs,  {'weibo_id': 2} <class 'dict'>
21:48:44 kwargs,  {'weibo_id': 3} <class 'dict'>
21:48:44 kwargs,  {'weibo_id': 4} <class 'dict'>
21:48:44 kwargs,  {'weibo_id': 5} <class 'dict'>
21:48:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet",
    "id": 1
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "content": "123456",
    "id": 4,
    "comments": []
  },
  {
    "content": "-------",
    "id": 5,
    "comments": []
  }
]
21:48:54 完整请求
21:48:54 请求结束
21:48:54 rrr POST /api/weibo/update HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Content-Length: 33
Origin: http://localhost:3000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03

{"id":"5","content":"5555555555"}
21:48:54 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:48:54 path and query /api/weibo/update {} {"id":"5","content":"5555555555"}
21:48:54 kwargs,  {'id': 5} <class 'dict'>
21:48:54 debug 4
21:48:54 kwargs,  {'weibo_id': 5} <class 'dict'>
21:48:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "5555555555",
  "id": 5,
  "comments": []
}
21:49:15 完整请求
21:49:15 请求结束
21:49:15 rrr 
21:53:16 完整请求
21:53:16 请求结束
21:53:16 rrr GET /weibo/index HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:53:16 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:53:16 path and query /weibo/index {} 
21:53:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <button
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:53:16 完整请求
21:53:16 请求结束
21:53:16 rrr GET /static?file=gua.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:53:16 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:53:16 path and query /static {'file': 'gua.js'} 
21:53:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(weibo_id, callback) {
    var path = '/api/weibo/delete?id=' + weibo_id
    ajax('GET', path, '', callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log(form)
    ajax('POST', path, form, callback)
}

21:53:16 完整请求
21:53:16 请求结束
21:53:16 rrr GET /static?file=weibo.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:53:16 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:53:16 path and query /static {'file': 'weibo.js'} 
21:53:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {

    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var w = `
        <div class='weibo-cell, ${id}' data-id=${id}>
            <div class="weibo-content">
                [WEIBO]: ${content}
            <button class="Weibo-delete">删除</button>
            </div>
            <button class="Weibo-edit">更新</button>

            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return w
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var content = WeiboCell.querySelector('.weibo-content')
//            content.style.display="none"
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            log('输入的值： ' + content)
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('输入的值form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                log('更新内容', r)
                var Weibo = JSON.parse(r)
                var selector = 'weibo-cell'
                var WeiboCell = e(selector)
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.style.display="block"
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:53:17 完整请求
21:53:17 请求结束
21:53:17 rrr GET /api/weibo/all HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:53:17 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:53:17 path and query /api/weibo/all {} 
21:53:17 kwargs,  {'weibo_id': 1} <class 'dict'>
21:53:17 kwargs,  {'weibo_id': 2} <class 'dict'>
21:53:17 kwargs,  {'weibo_id': 3} <class 'dict'>
21:53:17 kwargs,  {'weibo_id': 4} <class 'dict'>
21:53:17 kwargs,  {'weibo_id': 5} <class 'dict'>
21:53:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet",
    "id": 1
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "content": "123456",
    "id": 4,
    "comments": []
  },
  {
    "content": "5555555555",
    "id": 5,
    "comments": []
  }
]
21:53:51 完整请求
21:53:51 请求结束
21:53:51 rrr GET /api/weibo/delete?id=5 HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:53:51 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:53:51 path and query /api/weibo/delete {'id': '5'} 
21:53:51 kwargs,  {'weibo_id': 5} <class 'dict'>
21:53:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "5555555555",
  "id": 5,
  "comments": []
}
21:54:15 完整请求
21:54:15 请求结束
21:54:15 rrr 
21:54:58 完整请求
21:54:58 请求结束
21:54:58 rrr GET /weibo/index HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:54:58 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:54:58 path and query /weibo/index {} 
21:54:58 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <button
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:54:58 完整请求
21:54:58 请求结束
21:54:58 rrr GET /static?file=gua.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:54:58 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:54:58 path and query /static {'file': 'gua.js'} 
21:54:58 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(weibo_id, callback) {
    var path = '/api/weibo/delete?id=' + weibo_id
    ajax('GET', path, '', callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log(form)
    ajax('POST', path, form, callback)
}

21:54:58 完整请求
21:54:58 请求结束
21:54:58 rrr GET /static?file=weibo.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:54:58 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:54:58 path and query /static {'file': 'weibo.js'} 
21:54:58 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {

    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var w = `
        <div class='weibo-cell + ${id}' data-id=${id}>
            <div class="weibo-content">
                [WEIBO]: ${content}
            <button class="Weibo-delete">删除</button>
            </div>
            <button class="Weibo-edit">更新</button>

            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return w
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var content = WeiboCell.querySelector('.weibo-content')
//            content.style.display="none"
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            log('输入的值： ' + content)
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('输入的值form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                log('更新内容', r)
                var Weibo = JSON.parse(r)
                var selector = 'weibo-cell'
                var WeiboCell = e(selector)
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.style.display="block"
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:54:58 完整请求
21:54:59 请求结束
21:54:59 rrr GET /api/weibo/all HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:54:59 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:54:59 path and query /api/weibo/all {} 
21:54:59 kwargs,  {'weibo_id': 1} <class 'dict'>
21:54:59 kwargs,  {'weibo_id': 2} <class 'dict'>
21:54:59 kwargs,  {'weibo_id': 3} <class 'dict'>
21:54:59 kwargs,  {'weibo_id': 4} <class 'dict'>
21:54:59 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet",
    "id": 1
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "content": "123456",
    "id": 4,
    "comments": []
  }
]
21:55:46 完整请求
21:55:46 请求结束
21:55:46 rrr GET /weibo/index HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:55:46 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:55:46 path and query /weibo/index {} 
21:55:46 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <button
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:55:46 完整请求
21:55:46 请求结束
21:55:46 rrr GET /static?file=gua.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:55:46 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:55:46 path and query /static {'file': 'gua.js'} 
21:55:46 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(weibo_id, callback) {
    var path = '/api/weibo/delete?id=' + weibo_id
    ajax('GET', path, '', callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log(form)
    ajax('POST', path, form, callback)
}

21:55:46 完整请求
21:55:46 请求结束
21:55:46 rrr GET /static?file=weibo.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:55:46 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:55:46 path and query /static {'file': 'weibo.js'} 
21:55:46 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {

    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var w = `
        <div class='weibo-cell + ${id}' data-id=${id}>
            <div class="weibo-content">
                [WEIBO]: ${content}
            <button class="Weibo-delete">删除</button>
            </div>
            <button class="Weibo-edit">更新</button>

            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return w
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var content = WeiboCell.querySelector('.weibo-content')
//            content.style.display="none"
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            log('输入的值： ' + content)
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('输入的值form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                log('更新内容', r)
                var Weibo = JSON.parse(r)
                var selector = 'weibo-cell, '+ Weibo_id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.style.display="block"
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:55:46 完整请求
21:55:46 请求结束
21:55:47 rrr GET /api/weibo/all HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:55:47 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:55:47 path and query /api/weibo/all {} 
21:55:47 kwargs,  {'weibo_id': 1} <class 'dict'>
21:55:47 kwargs,  {'weibo_id': 2} <class 'dict'>
21:55:47 kwargs,  {'weibo_id': 3} <class 'dict'>
21:55:47 kwargs,  {'weibo_id': 4} <class 'dict'>
21:55:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet",
    "id": 1
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "content": "123456",
    "id": 4,
    "comments": []
  }
]
21:55:51 完整请求
21:55:51 请求结束
21:55:51 rrr POST /api/weibo/update HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Content-Length: 37
Origin: http://localhost:3000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03

{"id":"4","content":"12312323132132"}
21:55:51 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:55:51 path and query /api/weibo/update {} {"id":"4","content":"12312323132132"}
21:55:51 kwargs,  {'id': 4} <class 'dict'>
21:55:51 debug 3
21:55:51 kwargs,  {'weibo_id': 4} <class 'dict'>
21:55:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "12312323132132",
  "id": 4,
  "comments": []
}
21:56:15 完整请求
21:56:15 请求结束
21:56:15 rrr 
21:57:55 完整请求
21:57:55 请求结束
21:57:55 rrr GET /weibo/index HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:57:55 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:57:55 path and query /weibo/index {} 
21:57:55 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <button
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:57:55 完整请求
21:57:55 请求结束
21:57:55 rrr GET /static?file=gua.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:57:55 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:57:55 path and query /static {'file': 'gua.js'} 
21:57:55 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(weibo_id, callback) {
    var path = '/api/weibo/delete?id=' + weibo_id
    ajax('GET', path, '', callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log(form)
    ajax('POST', path, form, callback)
}

21:57:55 完整请求
21:57:55 请求结束
21:57:55 rrr GET /static?file=weibo.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:57:55 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:57:55 path and query /static {'file': 'weibo.js'} 
21:57:55 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {

    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var w = `
        <div class='weibo-cell ${id}' data-id=${id}>
            <div class="weibo-content">
                [WEIBO]: ${content}
            <button class="Weibo-delete">删除</button>
            </div>
            <button class="Weibo-edit">更新</button>

            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return w
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var content = WeiboCell.querySelector('.weibo-content')
//            content.style.display="none"
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            log('输入的值： ' + content)
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('输入的值form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                log('更新内容', r)
                var Weibo = JSON.parse(r)
                var selector = Weibo_id + ""
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.style.display="block"
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:57:56 完整请求
21:57:56 请求结束
21:57:56 rrr GET /api/weibo/all HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:57:56 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:57:56 path and query /api/weibo/all {} 
21:57:56 kwargs,  {'weibo_id': 1} <class 'dict'>
21:57:56 kwargs,  {'weibo_id': 2} <class 'dict'>
21:57:56 kwargs,  {'weibo_id': 3} <class 'dict'>
21:57:56 kwargs,  {'weibo_id': 4} <class 'dict'>
21:57:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet",
    "id": 1
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "content": "12312323132132",
    "id": 4,
    "comments": []
  }
]
21:58:02 完整请求
21:58:02 请求结束
21:58:02 rrr POST /api/weibo/update HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Content-Length: 29
Origin: http://localhost:3000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03

{"id":"4","content":"qqqqqq"}
21:58:02 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:58:02 path and query /api/weibo/update {} {"id":"4","content":"qqqqqq"}
21:58:02 kwargs,  {'id': 4} <class 'dict'>
21:58:02 debug 3
21:58:02 kwargs,  {'weibo_id': 4} <class 'dict'>
21:58:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "qqqqqq",
  "id": 4,
  "comments": []
}
21:58:15 完整请求
21:58:15 请求结束
21:58:15 rrr 
21:58:43 完整请求
21:58:43 请求结束
21:58:43 rrr GET /weibo/index HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:58:43 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:58:43 path and query /weibo/index {} 
21:58:43 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <button
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:58:44 完整请求
21:58:44 请求结束
21:58:44 rrr GET /static?file=gua.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:58:44 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:58:44 path and query /static {'file': 'gua.js'} 
21:58:44 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(weibo_id, callback) {
    var path = '/api/weibo/delete?id=' + weibo_id
    ajax('GET', path, '', callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log(form)
    ajax('POST', path, form, callback)
}

21:58:44 完整请求
21:58:44 请求结束
21:58:44 rrr GET /static?file=weibo.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:58:44 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:58:44 path and query /static {'file': 'weibo.js'} 
21:58:44 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {

    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var w = `
        <div class='weibo-cell id=${id}' data-id=${id}>
            <div class="weibo-content">
                [WEIBO]: ${content}
            <button class="Weibo-delete">删除</button>
            </div>
            <button class="Weibo-edit">更新</button>

            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return w
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var content = WeiboCell.querySelector('.weibo-content')
//            content.style.display="none"
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            log('输入的值： ' + content)
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('输入的值form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                log('更新内容', r)
                var Weibo = JSON.parse(r)
                var selector = 'id=' + Weibo_id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.style.display="block"
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:58:44 完整请求
21:58:44 请求结束
21:58:44 rrr GET /api/weibo/all HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:58:44 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:58:44 path and query /api/weibo/all {} 
21:58:44 kwargs,  {'weibo_id': 1} <class 'dict'>
21:58:44 kwargs,  {'weibo_id': 2} <class 'dict'>
21:58:44 kwargs,  {'weibo_id': 3} <class 'dict'>
21:58:44 kwargs,  {'weibo_id': 4} <class 'dict'>
21:58:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet",
    "id": 1
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "content": "qqqqqq",
    "id": 4,
    "comments": []
  }
]
21:58:49 完整请求
21:58:49 请求结束
21:58:49 rrr POST /api/weibo/update HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Content-Length: 26
Origin: http://localhost:3000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03

{"id":"4","content":"666"}
21:58:49 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:58:49 path and query /api/weibo/update {} {"id":"4","content":"666"}
21:58:49 kwargs,  {'id': 4} <class 'dict'>
21:58:49 debug 3
21:58:49 kwargs,  {'weibo_id': 4} <class 'dict'>
21:58:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "666",
  "id": 4,
  "comments": []
}
21:59:07 完整请求
21:59:07 请求结束
21:59:07 rrr 
21:59:07 完整请求
21:59:07 请求结束
21:59:07 rrr GET /weibo/index HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:59:07 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:59:07 path and query /weibo/index {} 
21:59:07 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <button
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:59:08 完整请求
21:59:08 请求结束
21:59:08 rrr GET /static?file=gua.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:59:08 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:59:08 path and query /static {'file': 'gua.js'} 
21:59:08 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(weibo_id, callback) {
    var path = '/api/weibo/delete?id=' + weibo_id
    ajax('GET', path, '', callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log(form)
    ajax('POST', path, form, callback)
}

21:59:08 完整请求
21:59:08 请求结束
21:59:08 rrr GET /static?file=weibo.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:59:08 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:59:08 path and query /static {'file': 'weibo.js'} 
21:59:08 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {

    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var w = `
        <div class='weibo-cell id=${id}' data-id=${id}>
            <div class="weibo-content">
                [WEIBO]: ${content}
            <button class="Weibo-delete">删除</button>
            </div>
            <button class="Weibo-edit">更新</button>

            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return w
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var content = WeiboCell.querySelector('.weibo-content')
//            content.style.display="none"
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            log('输入的值： ' + content)
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('输入的值form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                log('更新内容', r)
                var Weibo = JSON.parse(r)
                var selector = '.id=' + Weibo_id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.style.display="block"
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:59:08 完整请求
21:59:08 请求结束
21:59:08 rrr GET /api/weibo/all HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:59:08 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:59:08 path and query /api/weibo/all {} 
21:59:08 kwargs,  {'weibo_id': 1} <class 'dict'>
21:59:08 kwargs,  {'weibo_id': 2} <class 'dict'>
21:59:08 kwargs,  {'weibo_id': 3} <class 'dict'>
21:59:08 kwargs,  {'weibo_id': 4} <class 'dict'>
21:59:08 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet",
    "id": 1
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "content": "666",
    "id": 4,
    "comments": []
  }
]
21:59:17 完整请求
21:59:17 请求结束
21:59:17 rrr POST /api/weibo/update HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Content-Length: 33
Origin: http://localhost:3000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03

{"id":"4","content":"!!!!!!!!!!"}
21:59:17 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:59:17 path and query /api/weibo/update {} {"id":"4","content":"!!!!!!!!!!"}
21:59:17 kwargs,  {'id': 4} <class 'dict'>
21:59:17 debug 3
21:59:17 kwargs,  {'weibo_id': 4} <class 'dict'>
21:59:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "!!!!!!!!!!",
  "id": 4,
  "comments": []
}
21:59:28 完整请求
21:59:28 请求结束
21:59:28 rrr 
22:01:40 完整请求
22:01:40 请求结束
22:01:40 rrr GET /weibo/index HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


22:01:40 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
22:01:40 path and query /weibo/index {} 
22:01:40 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <button
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:01:40 完整请求
22:01:40 请求结束
22:01:40 rrr GET /static?file=gua.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


22:01:40 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
22:01:40 path and query /static {'file': 'gua.js'} 
22:01:40 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(weibo_id, callback) {
    var path = '/api/weibo/delete?id=' + weibo_id
    ajax('GET', path, '', callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log(form)
    ajax('POST', path, form, callback)
}

22:01:40 完整请求
22:01:40 请求结束
22:01:40 rrr GET /static?file=weibo.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


22:01:40 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
22:01:40 path and query /static {'file': 'weibo.js'} 
22:01:40 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {

    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var w = `
        <div class='weibo-cell' id='${id}' data-id=${id}>
            <div class="weibo-content">
                [WEIBO]: ${content}
            <button class="Weibo-delete">删除</button>
            </div>
            <button class="Weibo-edit">更新</button>

            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return w
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var content = WeiboCell.querySelector('.weibo-content')
//            content.style.display="none"
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            log('输入的值： ' + content)
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('输入的值form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                log('更新内容', r)
                var Weibo = JSON.parse(r)
                var selector = '#' + Weibo_id
                var WeiboCell = (selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.style.display="block"
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:01:40 完整请求
22:01:40 请求结束
22:01:40 rrr GET /api/weibo/all HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


22:01:40 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
22:01:40 path and query /api/weibo/all {} 
22:01:40 kwargs,  {'weibo_id': 1} <class 'dict'>
22:01:40 kwargs,  {'weibo_id': 2} <class 'dict'>
22:01:40 kwargs,  {'weibo_id': 3} <class 'dict'>
22:01:40 kwargs,  {'weibo_id': 4} <class 'dict'>
22:01:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet",
    "id": 1
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "content": "!!!!!!!!!!",
    "id": 4,
    "comments": []
  }
]
22:01:52 完整请求
22:01:52 请求结束
22:01:52 rrr POST /api/weibo/update HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Content-Length: 30
Origin: http://localhost:3000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03

{"id":"4","content":"1221221"}
22:01:52 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
22:01:52 path and query /api/weibo/update {} {"id":"4","content":"1221221"}
22:01:52 kwargs,  {'id': 4} <class 'dict'>
22:01:52 debug 3
22:01:52 kwargs,  {'weibo_id': 4} <class 'dict'>
22:01:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "1221221",
  "id": 4,
  "comments": []
}
22:02:10 完整请求
22:02:10 请求结束
22:02:10 rrr 
22:02:10 完整请求
22:02:10 请求结束
22:02:10 rrr GET /weibo/index HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


22:02:10 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
22:02:10 path and query /weibo/index {} 
22:02:10 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <button
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:02:10 完整请求
22:02:10 请求结束
22:02:10 rrr GET /static?file=gua.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


22:02:10 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
22:02:10 path and query /static {'file': 'gua.js'} 
22:02:10 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(weibo_id, callback) {
    var path = '/api/weibo/delete?id=' + weibo_id
    ajax('GET', path, '', callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log(form)
    ajax('POST', path, form, callback)
}

22:02:10 完整请求
22:02:10 请求结束
22:02:10 rrr GET /static?file=weibo.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


22:02:10 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
22:02:10 path and query /static {'file': 'weibo.js'} 
22:02:10 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {

    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var w = `
        <div class='weibo-cell' id='${id}' data-id=${id}>
            <div class="weibo-content">
                [WEIBO]: ${content}
            <button class="Weibo-delete">删除</button>
            </div>
            <button class="Weibo-edit">更新</button>

            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return w
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var content = WeiboCell.querySelector('.weibo-content')
//            content.style.display="none"
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            log('输入的值： ' + content)
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('输入的值form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                log('更新内容', r)
                var Weibo = JSON.parse(r)
                var selector = '#' + Weibo_id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.style.display="block"
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:02:10 完整请求
22:02:10 请求结束
22:02:10 rrr GET /api/weibo/all HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


22:02:10 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
22:02:10 path and query /api/weibo/all {} 
22:02:10 kwargs,  {'weibo_id': 1} <class 'dict'>
22:02:10 kwargs,  {'weibo_id': 2} <class 'dict'>
22:02:10 kwargs,  {'weibo_id': 3} <class 'dict'>
22:02:10 kwargs,  {'weibo_id': 4} <class 'dict'>
22:02:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet",
    "id": 1
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "content": "1221221",
    "id": 4,
    "comments": []
  }
]
22:02:15 完整请求
22:02:15 请求结束
22:02:15 rrr POST /api/weibo/update HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Content-Length: 34
Origin: http://localhost:3000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03

{"id":"4","content":"!!!!!!!!!!!"}
22:02:15 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
22:02:15 path and query /api/weibo/update {} {"id":"4","content":"!!!!!!!!!!!"}
22:02:15 kwargs,  {'id': 4} <class 'dict'>
22:02:15 debug 3
22:02:15 kwargs,  {'weibo_id': 4} <class 'dict'>
22:02:15 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "!!!!!!!!!!!",
  "id": 4,
  "comments": []
}
22:03:15 完整请求
22:03:15 请求结束
22:03:15 rrr 
22:03:36 完整请求
22:03:36 请求结束
22:03:36 rrr GET /weibo/index HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


22:03:36 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
22:03:36 path and query /weibo/index {} 
22:03:36 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <button
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:03:36 完整请求
22:03:36 请求结束
22:03:36 rrr GET /static?file=gua.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


22:03:36 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
22:03:36 path and query /static {'file': 'gua.js'} 
22:03:36 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(weibo_id, callback) {
    var path = '/api/weibo/delete?id=' + weibo_id
    ajax('GET', path, '', callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log(form)
    ajax('POST', path, form, callback)
}

22:03:37 完整请求
22:03:37 请求结束
22:03:37 rrr GET /static?file=weibo.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


22:03:37 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
22:03:37 path and query /static {'file': 'weibo.js'} 
22:03:37 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {

    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var w = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class="weibo-content">
                [WEIBO]: ${content}
            <button class="Weibo-delete">删除</button>
            </div>
            <button class="Weibo-edit">更新</button>

            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return w
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var content = WeiboCell.querySelector('.weibo-content')
//            content.style.display="none"
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            log('输入的值： ' + content)
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('输入的值form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                log('更新内容', r)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo_id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.style.display="block"
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:03:37 完整请求
22:03:37 请求结束
22:03:37 rrr GET /api/weibo/all HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


22:03:37 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
22:03:37 path and query /api/weibo/all {} 
22:03:37 kwargs,  {'weibo_id': 1} <class 'dict'>
22:03:37 kwargs,  {'weibo_id': 2} <class 'dict'>
22:03:37 kwargs,  {'weibo_id': 3} <class 'dict'>
22:03:37 kwargs,  {'weibo_id': 4} <class 'dict'>
22:03:37 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet",
    "id": 1
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "content": "!!!!!!!!!!!",
    "id": 4,
    "comments": []
  }
]
22:03:48 完整请求
22:03:48 请求结束
22:03:48 rrr POST /api/weibo/update HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Content-Length: 29
Origin: http://localhost:3000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03

{"id":"4","content":"123123"}
22:03:48 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
22:03:48 path and query /api/weibo/update {} {"id":"4","content":"123123"}
22:03:48 kwargs,  {'id': 4} <class 'dict'>
22:03:48 debug 3
22:03:48 kwargs,  {'weibo_id': 4} <class 'dict'>
22:03:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "123123",
  "id": 4,
  "comments": []
}
22:04:15 完整请求
22:04:15 请求结束
22:04:15 rrr 
21:03:27 完整请求
21:03:27 请求结束
21:03:27 rrr GET /weibo/index HTTP/1.1
Host: localhost:3000
Connection: keep-alive
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:03:27 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:03:27 path and query /weibo/index {} 
21:03:27 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <button
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:03:27 完整请求
21:03:27 请求结束
21:03:27 rrr GET /static?file=gua.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:03:27 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:03:27 path and query /static {'file': 'gua.js'} 
21:03:28 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(weibo_id, callback) {
    var path = '/api/weibo/delete?id=' + weibo_id
    ajax('GET', path, '', callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    log(form)
    ajax('POST', path, form, callback)
}

21:03:28 完整请求
21:03:28 请求结束
21:03:28 rrr GET /static?file=weibo.js HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:03:28 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:03:28 path and query /static {'file': 'weibo.js'} 
21:03:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {

    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var w = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <div class="weibo-content">
                [WEIBO]: ${content}
            <button class="Weibo-delete">删除</button>
            </div>
            <button class="Weibo-edit">更新</button>

            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return w
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 编辑这个 Weibo
            var WeiboCell = self.parentElement
            var content = WeiboCell.querySelector('.weibo-content')
//            content.style.display="none"
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            log('输入的值： ' + content)
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('输入的值form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                log('更新内容', r)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo_id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                contentSpan.style.display="block"
                contentSpan.innerHTML = '[WEIBO]: ' + Weibo.content
            })
        }
    })
}

var vindEventWeiboComment

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:03:28 完整请求
21:03:28 请求结束
21:03:28 rrr GET /api/weibo/all HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


21:03:28 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
21:03:28 path and query /api/weibo/all {} 
21:03:28 kwargs,  {'weibo_id': 1} <class 'dict'>
21:03:28 kwargs,  {'weibo_id': 2} <class 'dict'>
21:03:28 kwargs,  {'weibo_id': 3} <class 'dict'>
21:03:28 kwargs,  {'weibo_id': 4} <class 'dict'>
21:03:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet",
    "id": 1
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "content": "123123",
    "id": 4,
    "comments": []
  }
]
21:03:38 完整请求
21:03:38 完整请求
21:03:38 请求结束
21:03:38 请求结束
21:03:38 rrr 
21:03:38 rrr 
14:00:38 完整请求
14:00:38 请求结束
14:00:38 rrr GET /favicon.ico HTTP/1.1
Host: localhost:3000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: image/webp,image/*,*/*;q=0.8
Referer: http://localhost:3000/weibo/index
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.6
Cookie: Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03


14:00:38 cookie ['Pycharm-9865d5fc=11012954-1ac4-43aa-ae30-7e9e8dee1b03']
14:00:38 path and query /favicon.ico {} 
14:00:38 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:00:41 完整请求
14:00:41 请求结束
14:00:41 rrr 
