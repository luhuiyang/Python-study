# 作业 1
# 以后每次的作业出来后 我会放到群公告
# 
# 这表示引入了一个别人写好的东西(术语模块, 很快会讲)
import turtle

# 这样可以得到一个变量 t, 可以对它进行很多操作
# 很快会讲, 现在先用
t = turtle.Turtle()


# 例子 1
# 
# 实现函数, 用于画一个边长 100 的正方形
# 参数 x, y 是正方形左上角坐标
def square(x, y):
    # 这三行的意思是 移动到 x y 处
    # 但是不露痕迹 (参考资料)
    t.penup()
    t.goto(x, y)
    t.pendown()
    # 设置朝向, 确保箭头朝向 右边
    # 如果是用 t.goto 来画的话, 就不用关心朝向
    t.setheading(0)
    # 循环画正方形
    # 当然, 你可以用 t.goto 来画
    # 只需要计算一下四个顶点的坐标 (这很简单)
    for i in range(4):
        t.forward(100)
        t.right(90)


# 1
# 实现函数, 用于画一个正方形, 边长由参数提供
# 参数 x, y 是正方形左上角坐标
# 参数 l 是正方行边长
# 函数声明如下
# def square(x, y, l)


# 2
# 实现函数, 用于画一个矩形, 长宽由参数提供
# 参数 x, y 是左上角坐标
# 参数 w, h 是长宽
# 函数声明如下
# def rect(x, y, w, h)


# 3
# 画一排正方形, 一共 5 个
# 从 0 0 点开始, 边长为 30, 正方形之间间隔为 0
# 函数声明如下
# def square5()
# 提示 根据资料中的循环例子, 计算每个正方形的坐标


# 4
# 画一排正方形, 一共 5 个
# 从 0 0 点开始, 边长为 30, 正方形之间间隔为 10 像素
# 函数声明如下
# def square5()


# 5
# 实现函数, 画一排正方形, 有如下参数
# x, y 是第一个正方形左上角坐标
# n 是正方形的个数
# space 是两个正方形之间的间距
# l 是正方形的边长
# def square_line(x, y, n, space, l)


# 6
# 实现函数, 用上题的函数来画一个正方形方阵, 参数如下
# x, y 是第一个正方形左上角坐标
# space 是两个正方形之间的间距
# l 是正方形的边长
# n 是横向正方形的个数
# m 是纵向正方形的个数
# def square_square(x, y, space, l, n, m)


# 7
# 实现函数, 画一排矩形, 有如下参数
# x, y 是第一个矩形左上角坐标
# w, h 是矩形长宽
# n 是矩形的个数
# space 是两个矩形之间的间距
# def rect_line(x, y, w, h, space)


# 8
# 实现函数, 画一个矩形方阵, 参数如下
# x, y 是第一个矩形左上角坐标
# space 是两个矩形之间的间距(横向和纵向)
# w, h 是矩形的长宽
# n 是横向矩形的个数
# m 是纵向矩形的个数
# def rect_square(x, y, space, w, h, n, m)


# 9
# 实现函数, 画一个正多边形, 参数如下
# x y 是起点, 设起点为多边形的顶部边的左顶点
# n 是多边形的边数
# l 是边长
# def polygon(x, y, n, l)


# 10
# 实现函数, 画一个正多边形, 参数如下
# x y 是中心点
# n 是多边形的边数
# l 是边长
# def polygon(x, y, n, l)
# 
# 提示, 有中心点, 就能算出顶部边的起点
# 使用角度 / 转向 / t.setheading 实现这个函数


# 11
# 实现函数, 画圆
# 参数如下
# x, y, r 分别是 圆心坐标 和 半径
# def circle(x, y, r)
# 
# 思路
# 假设圆为正 36 边形(无所谓 你可以提高 我觉得 36 就好了)
# 那么周长 c 是 2 * PI * r
# PI 就设为 3.14 好了
# 所以就可以算出 边长
# 有了边长 就能算出第一步的坐标
# 然后就可以画一个 正36边形 了
# 记得用 资料中的函数来辅助
# 当然 你可以直接使用上题的函数



# 画完后一定要加上这一句
turtle.done()
